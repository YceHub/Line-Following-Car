#include <QTRSensors.h>

// Define the sensor pin connections
const int sensor1Pin = A0;
const int sensor2Pin = A1;
const int sensor3Pin = A2;
const int sensor4Pin = A3;
const int sensor5Pin = A4;

// Define the motor pin connections
const int motor1pin1 = 2;
const int motor1pin2 = 3;
const int motor2pin1 = 4;
const int motor2pin2 = 5;

// Define motor speeds
const int speed1 = 155;
const int speed2 = 160;
const int rightMotorSpeed = 90;   // PWM duty cycle for the right motor (range: 0-255)
const int leftMotorSpeed = 110;   // PWM duty cycle for the left motor (range: 0-255)
const int rightMotorSpeed1 = 110; // PWM duty cycle for the right motor (range: 0-255)
const int leftMotorSpeed1 = 90;   // PWM duty cycle for the left motor (range: 0-255)

// Create an instance of the QTRSensors class
QTRSensors qtr;

// Define the number of sensors and the sensor pin numbers
const uint8_t numSensors = 5;
uint16_t sensorValues[numSensors];

// Define the threshold for black detection
const uint16_t blackThreshold = 500; // Adjust this value based on your environment

void setup() {
  // Configure the sensor pins
  uint8_t sensorPins[] = {sensor1Pin, sensor2Pin, sensor3Pin, sensor4Pin, sensor5Pin};

  // Initialize the QTRSensors object
  qtr.setTypeAnalog();                      // Set the sensor type to analog
  qtr.setSensorPins(sensorPins, numSensors); // Set the sensor pins

  // Initialize the serial communication
  Serial.begin(9600);

  // Set the motor pins as outputs
  pinMode(motor1pin1, OUTPUT);
  pinMode(motor1pin2, OUTPUT);
  pinMode(motor2pin1, OUTPUT);
  pinMode(motor2pin2, OUTPUT);

  // (Optional) - Add labels to these pins
  pinMode(6, OUTPUT); 
  pinMode(7, OUTPUT);
  // (Optional) - Add labels to these pins
}

void loop() {
  // Read the sensor values
  qtr.read(sensorValues);

  // Print the sensor values
  for (uint8_t i = 0; i < numSensors; i++) {
    if (sensorValues[i] < blackThreshold) {
      // Serial.print("black\t");
    } else {
      // Serial.print(sensorValues[i]);
      // Serial.print('\t');
    }
  }

  // Forward
  if (sensorValues[0] > blackThreshold && sensorValues[1] > blackThreshold && sensorValues[2] < blackThreshold && 
      sensorValues[3] > blackThreshold && sensorValues[4] > blackThreshold) {
    forward();
  }
 if (sensorValues[0] < blackThreshold && sensorValues[1] < blackThreshold && sensorValues[2] < blackThreshold && 
      sensorValues[3] < blackThreshold && sensorValues[4] < blackThreshold) {
    forward();
  }

   if (sensorValues[0] > blackThreshold && sensorValues[1] < blackThreshold && sensorValues[2] < blackThreshold && 
      sensorValues[3] < blackThreshold && sensorValues[4] > blackThreshold) {
    forward();
  }


  // Left
  if (sensorValues[0] > blackThreshold && sensorValues[1] < blackThreshold && sensorValues[2] > blackThreshold &&
      sensorValues[3] > blackThreshold && sensorValues[4] > blackThreshold) {
    // Go forward
    leftcurve();
  } 
  
   else if (sensorValues[0] < blackThreshold && sensorValues[1] > blackThreshold && sensorValues[2] > blackThreshold &&
      sensorValues[3] > blackThreshold && sensorValues[4] > blackThreshold) {
    // Go forward
    left();
  }

else if (sensorValues[0] < blackThreshold && sensorValues[1] > blackThreshold && sensorValues[2] < blackThreshold &&
      sensorValues[3] > blackThreshold && sensorValues[4] > blackThreshold) {
    // Go forward
    left();
  }

  else if (sensorValues[0] > blackThreshold && sensorValues[1] < blackThreshold && sensorValues[2] < blackThreshold &&
      sensorValues[3] > blackThreshold && sensorValues[4] > blackThreshold) {
    // Go forward
    left();
  }

  else if (sensorValues[0] < blackThreshold && sensorValues[1] < blackThreshold && sensorValues[2] > blackThreshold &&
             sensorValues[3] > blackThreshold && sensorValues[4] > blackThreshold) {
    // Turn left
    leftcurve();
    
  } else if (sensorValues[0] < blackThreshold && sensorValues[1] < blackThreshold && sensorValues[2] < blackThreshold &&
             sensorValues[3] > blackThreshold && sensorValues[4] > blackThreshold) {
    // Turn left
    leftcurve();
  } 
  else if (sensorValues[0] < blackThreshold && sensorValues[1] < blackThreshold && sensorValues[2] < blackThreshold &&
             sensorValues[3] < blackThreshold && sensorValues[4] > blackThreshold) {
    // Turn left
    left90();
  } 

  // Right
  if (sensorValues[0] > blackThreshold && sensorValues[1] > blackThreshold && sensorValues[2] > blackThreshold && 
      sensorValues[3] < blackThreshold && sensorValues[4] > blackThreshold) {
    right();
  }

 if (sensorValues[0] > blackThreshold && sensorValues[1] < blackThreshold && sensorValues[2] < blackThreshold && 
      sensorValues[3] < blackThreshold && sensorValues[4] > blackThreshold) {
    right();
  }

  if (sensorValues[0] > blackThreshold && sensorValues[1] > blackThreshold && sensorValues[2] > blackThreshold && 
      sensorValues[3] > blackThreshold && sensorValues[4] < blackThreshold) {
    right();
  }

  if (sensorValues[0] > blackThreshold && sensorValues[1] > blackThreshold && sensorValues[2] > blackThreshold && 
      sensorValues[3] < blackThreshold && sensorValues[4] < blackThreshold) {
    rightcurve();
  }

  if (sensorValues[0] > blackThreshold && sensorValues[1] > blackThreshold && sensorValues[2] < blackThreshold && 
      sensorValues[3] < blackThreshold && sensorValues[4] < blackThreshold) {
    right90();
  }

  /*
  Serial.println();

  delay(100); // Delay between readings
  */
}

// Function for moving forward
void forward() {
  analogWrite(6, speed1);
  analogWrite(7, speed2);
  
  digitalWrite(motor1pin1, HIGH);
  digitalWrite(motor1pin2, LOW);

  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, HIGH);
}

void left() {
  analogWrite(6, speed1);  
  analogWrite(7, speed2);
  
  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, LOW);

  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, HIGH);
}

// Function for turning left
void leftcurve() {
  analogWrite(6, speed1);
  analogWrite(7, speed2);
  
  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, HIGH);

  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, HIGH);
}

// Function for turning left
void left90() {
  analogWrite(6, speed1);
  analogWrite(7, speed2);
  
  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, LOW);

  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, HIGH);
}

// Function for turning right
void right() {
  analogWrite(6, speed1);  
  analogWrite(7, speed2);
  
  digitalWrite(motor1pin1, HIGH);
  digitalWrite(motor1pin2, LOW);

  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, LOW);
}

// Function for turning right
void rightcurve() {
  analogWrite(6, speed1);
  analogWrite(7, speed2);
  
  digitalWrite(motor1pin1, HIGH);
  digitalWrite(motor1pin2, LOW);

  digitalWrite(motor2pin1, HIGH);
  digitalWrite(motor2pin2, LOW);
}

// Function for turning right
void right90() {
  analogWrite(6, speed1); 
  analogWrite(7, speed2);
  
  digitalWrite(motor1pin1, HIGH);
  digitalWrite(motor1pin2, LOW);

  digitalWrite(motor2pin1, HIGH);
  digitalWrite(motor2pin2, LOW);
}
